{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","id","name","username","email","className","alt","src","CardList","robots","cardArray","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2OAkBeA,EAfF,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,GAAIC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,MAChC,OAEI,yBAAKC,UAAS,uDAEN,4BAAKF,GACL,yBAAKG,IAAI,SAASC,IAAG,+BAA0BN,EAA1B,cACrB,4BAAKC,GACL,2BAAIE,KCWLI,EAlBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAOVC,EAAYD,EAAOE,KAAI,SAACC,EAAMC,GAChC,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAGZ,GAAIQ,EAAOI,GAAGZ,GAAIC,KAAMO,EAAOI,GAAGX,KAAMC,SAAUM,EAAOI,GAAGV,SAAUC,MAAOK,EAAOI,GAAGT,WAGhH,OACI,6BACKM,ICDEK,EAdG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACjB,OACI,yBAAKX,UAAU,OACX,2BACAA,UAAU,mCACVY,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCMPI,EARA,SAACC,GACZ,OACG,yBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UAChEJ,EAAMK,WCcHC,E,YArBX,WAAYN,GAAQ,IAAD,8BACf,4CAAMA,KACDO,MAAQ,CACTC,UAAU,GAHC,E,+EASDC,EAAOC,GACrBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAI1B,OAAIG,KAAKJ,MAAMC,SACJ,uDAEJG,KAAKX,MAAMK,a,GAlBEQ,aC8EbC,G,kBAxDX,aAAe,IAAD,8BACV,+CAuBJC,eAAiB,SAACC,GACd,EAAKJ,SAAU,CAAEK,YAAaD,EAAME,OAAOC,SAvB3C,EAAKZ,MAAQ,CACTnB,OAAQ,GACR6B,YAAa,IAJP,E,iFAaG,IAAD,OAChBG,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAU,EAAKZ,SAAS,CAAExB,OAAQoC,S,+BAgBlC,IAAD,EAC2Bb,KAAKJ,MAA7BnB,EADH,EACGA,OAAQ6B,EADX,EACWA,YACVQ,EAAiBrC,EAAOsC,QAAO,SAAAC,GACjC,OAAOA,EAAM9C,KAAK+C,cAAcC,SAASZ,EAAYW,kBAGvD,OAAKxC,EAAO0C,OAIN,yBAAK9C,UAAU,MACX,wBAAIA,UAAU,MAAd,gBACA,kBAAC,EAAD,CAAWW,aAAcgB,KAAKI,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAU3B,OAAQqC,OAR3B,8C,GAxCDZ,cCXEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCPNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDwH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,iB","file":"static/js/main.7c9091c5.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n//could also be const Card = ( { props } ) => { //and then use props.id etc.\r\nconst Card = ( {id, name, username, email} ) => {\r\n    return (\r\n        \r\n        <div className={`tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5`}>\r\n            \r\n                <h2>{username}</h2>\r\n                <img alt='robots' src={`https://robohash.org/${id}?200x200`} />\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            \r\n        </div>\r\n        \r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n//import { robots } from './robots';\r\n\r\nconst CardList = ( {robots} ) => {\r\n    \r\n    //FAKE ERROR\r\n    // if (true) {\r\n    //     throw new Error('Nooo!');\r\n    // }\r\n\r\n    const cardArray = robots.map((user, i) => {\r\n        return <Card key={i} id={robots[i].id} name={robots[i].name} username={robots[i].username} email={robots[i].email} />\r\n    });\r\n    \r\n    return (\r\n        <div>\r\n            {cardArray}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;\r\n\r\n\r\n//combine under one return? ","import React from 'react';\r\n\r\nconst SearchBox = ( {searchChange} ) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input \r\n            className='pa3 ba b--green bg-lightest-blue'\r\n            type='search'\r\n            placeholder='search robots'\r\n            onChange={searchChange} \r\n            />\r\n        </div>\r\n        \r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\n//Learned Props, Learned State, Time for Children\r\n//Used for wrapping components like <Scroll> </Scroll>\r\n//Scroll can use Children to render its children\r\n//We use props here because EVERY react component has a prop called children.\r\n//children looks confusing but does contain type: CardList \r\nconst Scroll = (props) => {\r\n    return (\r\n       <div style={{overflowY: 'scroll', border: '2px solid black', height: '800px' }}>\r\n           {props.children}\r\n       </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    //React Lifecycle Hook similar to try-catch block in Javascript\r\n    //Receives parameters error and info \r\n    componentDidCatch(error, info) {\r\n        this.setState({ hasError: true })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>Ooops. That's not good.</h1>\r\n        }\r\n        return this.props.children \r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\n//import { robots } from './robots';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport './App.css'\r\n\r\n//***Props and State\r\n//Props - things that come out of State.\r\n//State - Object that provides a description of your app.\r\n//For this example state consists of the robots array and the SearchBox value.\r\n//A Parent feeds State into a Child component. When the child receives, it becomes a prop. The child can't modify the prop. App feeds CardList.\r\n//Even though this.state.robots is a state, it's passed to child component CardList as a prop.\r\n//We have an App component that has two states.\r\n//App owns the state. Therefore it's considered a smart component vs. pure function components like SearchBox and CardList.\r\n//Any component that has state must use CLASS syntax in order to use constructor()\r\n//The state is what changes in an app. It describes the app.\r\n//The virtual DOM is just a javascript object that collects the entire state.\r\n//Then React uses this state to render and pass the state properties down to components as props.\r\n//These components which are simply PURE functions can then just render.\r\n//Having a stable state mechanism combined with pure function components results in very predictable behavior.\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            robots: [],\r\n            searchfield: '',\r\n        } \r\n    }\r\n\r\n//**Mounting** Order:\r\n//constructor() \r\n//componentWillMount() \r\n//render() \r\n//componentDidMount() - Yes, the component mounted on the webpage and it rendered something.\r\ncomponentDidMount() {\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(users => {this.setState({ robots: users })});\r\n}\r\n\r\n//We manage the state within App.js. The App component is the only thing that can change the state.     \r\n//However we can pass down functions as props too. We pass onSearchChange() to the SearchBox component.\r\n//The SearchBox component is configured such that every time there is a change of input in the search box, onSearchChange is executed via the searchChange prop that was passed in.\r\n//When onSearchChange() runs, note the setState() syntax used to update the searfield in this.state for the App above to whatever is typed.\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState( { searchfield: event.target.value } )\r\n    } \r\n\r\n//With the information we have from the search box we can now communicate with the CardList.\r\n//First we grab the current state of robots and filter the array down to whatever names include what is currently in the searchfield state.\r\n//Then rather than passing the current state of robots to CardList, we pass the filteredRobots instead to keep the correct robots visible as we type.\r\n//Technically having robots in state isn't needed since our robots[] is hard-coded but normally we'll be getting this info externally, like new user signups, where tracking state will be required. Good practice.\r\n    render() {\r\n        const { robots, searchfield } = this.state;\r\n        const filteredRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase());       \r\n        })\r\n        //if (robots.length === 0) {\r\n          if (!robots.length) {\r\n            return <h1>Loading...</h1>\r\n        } else {\r\n            return (\r\n                <div className='tc'>\r\n                    <h1 className='f1'>Robofriends!</h1>\r\n                    <SearchBox searchChange={this.onSearchChange}/>\r\n                    <Scroll>\r\n                        <ErrorBoundary>\r\n                            <CardList robots={filteredRobots} />\r\n                        </ErrorBoundary>\r\n                    </Scroll>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\n//import Card from './Card';\n//import CardList from './CardList';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n//import { robots } from './robots'; //must use destructuring syntax when \"export\" is used instead of \"export default\" because more than one thing can be exported.\n\n//ReactDOM.render(<App />, document.getElementById('root'));\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}